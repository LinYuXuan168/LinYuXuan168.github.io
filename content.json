{"meta":{"title":"Hexo","subtitle":"","description":"this is hexo-demo","author":"John Doe","url":"http://example.com","root":"/"},"pages":[{"title":"所有分类","date":"2022-12-24T04:56:16.903Z","updated":"2022-12-24T04:56:16.903Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2022-12-24T04:56:50.995Z","updated":"2022-12-24T04:56:50.995Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""},{"title":"","date":"2022-12-24T12:40:37.589Z","updated":"2022-12-24T12:40:37.589Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"下面写关于自己的内容"},{"title":"我的朋友们","date":"2022-12-24T04:57:39.677Z","updated":"2022-12-24T04:57:39.677Z","comments":true,"path":"friends/index.html","permalink":"http://example.com/friends/index.html","excerpt":"这里写友链上方的内容。","text":"这里写友链上方的内容。 这里可以写友链页面下方的文字备注，例如自己的友链规范、示例等。"}],"posts":[{"title":"re","slug":"re","date":"2023-04-20T14:26:25.000Z","updated":"2023-04-20T14:54:48.660Z","comments":true,"path":"2023/04/20/re/","link":"","permalink":"http://example.com/2023/04/20/re/","excerpt":"","text":"七个境界1234567891011121314151617181920212223242526import re # level1:固定字符串text = &#x27;麦叔身高:178，体重：168，学号：123456，密码:9527&#x27;# findall()方法的第1个参数是模式，第2个参数是要查找的字符串。# re的findall()方法找到所有符合模式的字符串，返回一个列表。# r表示这是一个raw字符串，让Python不要去转义里面的特殊字符print(re.findall(r&#x27;123456&#x27;, text)) # level2 - 某一类字符# \\d表示所有的数字，1,7,8,1,6,8等都可以匹配到print(re.findall(r&#x27;\\d&#x27;, text))# level3 重复某一类字符# 增加了+号，表示数字可以出现1到多次，所以178等都符合它的要求。print(re.findall(r&#x27;\\d+&#x27;, text))# 组合level4，5 -&gt; 找出座机号# \\d&#123;4&#125;-\\d&#123;8&#125;这是一个组合的模式，表示前面4个数字，中间一个横杠，后面8个数字。text = &#x27;麦叔电话是18812345678，他还有一个电话号码是18887654321，他爱好的数字是01234567891，他的座机是：0571-52152166&#x27;print(re.findall(r&#x27;\\d&#123;4&#125;-\\d&#123;8&#125;|1\\d&#123;10&#125;&#x27;, text))# 组合level6限定位置，7内部约束# ^符号，表示一定要在句子的开头才行# \\w&#123;3&#125;表示3个字符，放在小括号中(\\w&#123;3&#125;)就成为一个分组，而后面的(\\1)表示它里面的内容和第1个括号里的内容必须相同，其中的1就表示第1个括号，也就是说3个字符要重复出现两次。print(re.findall(r&#x27;^1\\d&#123;10&#125;|^\\d&#123;4&#125;-\\d&#123;8&#125;&#x27;, text))print(re.findall(r&#x27;(\\w&#123;3&#125;)(\\1)&#x27;, text)) 书写步骤 确定模式包含几个子模式 各个部分的字符分类是什么 各个子模式如何重复 是否有外部位置限制 是否有内部制约关系 正则表达式Cheatsheet re模块方法 re.search()：查找符合模式的字符，只返回第一个，返回Match对象 re.match()：和search一样，但要求必须从字符串开头匹配 re.findall()：返回所有匹配的字符串列表 re.finditer()：返回一个迭代器，其中包含所有的匹配，也就是Match对象 re.sub()：替换匹配的字符串，返回替换完成的文本 re.subn()：替换匹配的字符串，返回替换完成的文本和替换的次数 re.split()：用匹配表达式的字符串做分隔符分割原字符串 re.compile()：把正则表达式编译成一个对象，方便后面使用","categories":[{"name":"技术","slug":"技术","permalink":"http://example.com/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"技术大会","slug":"技术大会","permalink":"http://example.com/tags/%E6%8A%80%E6%9C%AF%E5%A4%A7%E4%BC%9A/"}],"author":"林宇轩"},{"title":"numpy","slug":"numpy","date":"2023-02-09T02:33:02.000Z","updated":"2023-02-09T02:36:18.477Z","comments":true,"path":"2023/02/09/numpy/","link":"","permalink":"http://example.com/2023/02/09/numpy/","excerpt":"","text":"通过数组进行运算的 Array创建 数组数据类型必须统一，且必须是有序的集合 Codenp.array （**元素类型不一致会强转） ** np.routines函数 12345678910111213141516171819202122232425262728# 用1来填充生成高维数组，shape决定行数列数，dtype则指数据类型np.ones(shape,dtype = None, order = &#x27;C&#x27;)np.ones(shape(3,2),dtype = np.int) # 三行两列np.ones(shape(3,5,2),dtype = np.int) # 三行五列的二维数组# np.zeros 用0填充# np.full(shape,fill_value = 6,dtype = None,order = &quot;C&quot;) # 用6来填充 # 对角线为一其他为0np.eye(N,M = none ,k = 0,dtype = float)np.eye(3,M = none ,k = 0,dtype = float) # 三维矩阵np.eye(3,M = 2 ,k = 1,dtype = float) # 三行两列 向右偏一个 # 生成等差数列# 按个数取，endpoint表示是否取末端np.linspace(start,stop,num = 10 ,endpoint = True,restep = False,dtype = None) np.linspace(0.10.num = 11 endpoint = True) # 按步长取 ,不取末端np.arrange(start，stop,step ,dtype = None)# 生成随机数np.random.randint(low,high,size,dtype) # size即前面的shape# 正态分布函数np.random.randn(d0,d1,...dn) # 标准正态分布 参数表示维数np.random.normal(loc,scale,size) # 普通正态分布 loc 期望值，scale方差，size个数# 生成0到1的随机数np.random.random(size) Array属性 ndim:维度 shape：形状（各维度的形状长度） size : 长度大小，即元素个数 dtype : 数据类型 Array的基本操作访问 直接访问 Codenp[roe_dinex,col_index] 间接访问 Codenp[roe_dinex][col_index]… 行访问 Codenp[roe_dinex,:] 列访问 Codenp[:,col_index] 多个元素访问（索引切片都是左闭右开区间)1.元素连续Codenp[1:3,2:5] （1:3为第一维，2:5为第二维）2.元素不连续 **使用列表作为索引值 3.使用bool列表访问,True对应的值会被返回 【BOOL的长度必须列长匹配** 】 1234567array([[1, 2, 3, 9, 3], [2, 8, 4, 6, 8], [5, 6, 1, 8, 8], [7, 3, 3, 1, 5], [9, 3, 6, 1, 5]])np[1:3,1:3] # 第一维取1和2 第二维取1和2np[[1,2],1] # 第一维取1和2，第二维取1 切片左闭右开 123# 采用：：两个冒号来指定步长np[::2] # 步长为二np[::-1] # 倒序输出 变形参数是一个元组，且变前变后元素数量不能变 123n1 = np.random.randint(1,10,size = (5,5))n1.reshape((-1,1)) # 变成一列n1.reshape((1,-1)) # 变成一行 级联两个级联的方向上数据数量要一致 123np.concatenate(array_like,axis) # array_like列表类型 axis 默认为0 竖着级联 axis = 1 横着连np.hstack() # 横向np.vstack() # 竖向 切分1234np.split(array,indices_or_sections,axis) # indices_or_sections表示切成的份数np.split(array,indices_or_sections = [1,4] ,axis) # 0:1,1:4,4: b不可以整除用切片规范 np.hsplit() # 横向np.vsplit() # 竖向 副本 深复制 - 内存空间 Codecopy() 浅复制 - **地址 ** Array聚合运算默认把整个数组的数据进行运算axis参数控制行列，行为1 列为 0 12345# 求和n1.sum# 空值np.nan Array矩阵运算numpy默认的运算符方式，数组中对应位置的数据相互运算 12# 矩阵积np.dot 广播机制（数据结构不同时）拓展补充数据，拓展维度 排序全排序Code np.sortCode arry.sort 部分排序 Codenp.partition(a,k)** k为正取最大k个，k为负取最小k个**","categories":[{"name":"python数据分析","slug":"python数据分析","permalink":"http://example.com/categories/python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"}],"tags":[{"name":"技术大会","slug":"技术大会","permalink":"http://example.com/tags/%E6%8A%80%E6%9C%AF%E5%A4%A7%E4%BC%9A/"}],"author":"林宇轩"},{"title":"jupyter notebook","slug":"jupyter-notebook","date":"2023-02-09T02:25:07.000Z","updated":"2023-02-09T02:28:07.092Z","comments":true,"path":"2023/02/09/jupyter-notebook/","link":"","permalink":"http://example.com/2023/02/09/jupyter-notebook/","excerpt":"","text":"单元格有两种状态 编辑状态 - 写代码或者文本（ENTER or 鼠标点击单元格内部） 选中状态 - 单元格进行编辑（ESC or 鼠标点击左边空白处） 单元格操作要先处于选中状态 新增单元格:B 在当前选中的单元格下方新增A 在当前选中的单元格上方新增 删除单元格：DD 删除选中单元格 复制，粘贴，剪切单元格：C 复制V 粘贴X 剪切 撤销：Z 单元格两种模式 Code - 选中状态下 Y Markdown - 选中状态下M Mardown一般用来整理思路写分析思路 运行所有的单元格运行都是独立的Cltrl + Enter Markdown进入预览模式 Code进入运行模式 命令 快速查看所有变量与函数名称Code%who 返回变量列表Code%who_ls 运行外部文件（默认为当前目录）Code %run *.py 运行计时Code %time statement(代码名称) **必须写在同一行 **Code %timeit statement(代码名称) (去多次时间平均)Code%%timeit (测试多组) 输入输出历史 In 输入 out 输出 “_”表示上一个输出 “_2 表示Out[2]","categories":[{"name":"python数据分析","slug":"python数据分析","permalink":"http://example.com/categories/python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"}],"tags":[{"name":"技术大会","slug":"技术大会","permalink":"http://example.com/tags/%E6%8A%80%E6%9C%AF%E5%A4%A7%E4%BC%9A/"}],"author":"林宇轩"},{"title":"技术分享（二）","slug":"技术分享（二）","date":"2022-12-25T15:28:10.000Z","updated":"2022-12-26T01:58:53.733Z","comments":true,"path":"2022/12/25/技术分享（二）/","link":"","permalink":"http://example.com/2022/12/25/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB%EF%BC%88%E4%BA%8C%EF%BC%89/","excerpt":"","text":"代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249import randomfrom math import sin, cos, pi, logfrom tkinter import *WIDTH = 640HEIGHT = 480CENTER_X = WIDTH / 2CENTER_Y = HEIGHT / 2IMAGE_ENLARGE = 11HEART_COLOR = &quot;#2ebb96&quot; # 自己换颜色 def heart_function(t, shrink_ratio: float = IMAGE_ENLARGE): x = 16 * (sin(t) ** 3) y = -(13 * cos(t) - 5 * cos(2 * t) - 2 * cos(3 * t) - cos(4 * t)) # 放大 x *= shrink_ratio y *= shrink_ratio # 移到围布中央 x += CENTER_X y += CENTER_Y return int(x), int(y) def scatter_inside(x, y, beta=0.15): ratio_x = -beta * log(random.random()) ratio_y = -beta * log(random.random()) dx = ratio_x * (x -CENTER_X) dy = ratio_y * (y -CENTER_Y) return x - dx, y - dy def shrink(x, y, ratio): force = -1 / (((x - CENTER_X) ** 2 + (y - CENTER_Y) ** 2) ** 1.6) dx = ratio * force * (x - CENTER_X) dy = ratio * force * (y - CENTER_Y) return x - dx, y-dydef curve(p): return 2 * (2 * sin(4 * p)) / (2 * pi) class Heart: def __init__(self, generate_frame=20): # 原始爱心坐标 self._points = set() # 边缘扩散点效果的合集 self._edge_diffusion_points = set() # 中心扩散效果点的合集 self._center_diffusion_points = set() # 每帧动态点坐标 self.all_points = &#123;&#125; self.build(2000) self.random_halo = 1000 self.generate_frame = generate_frame for frame in range(generate_frame): self.calc(frame) def build(self, number): for _ in range(number): t = random.uniform(0, 2 * pi) x, y = heart_function(t) self._points.add((x, y)) # 爱心扩散 for _x, _y in list(self._points): for _ in range(3): x, y = scatter_inside(_x, _y, 0.05) self._edge_diffusion_points.add((x, y)) # 爱心再次扩散 point_list = list(self._points) for _ in range(4000): x, y = random.choice(point_list) x, y = scatter_inside(x, y, 0.17) self._center_diffusion_points.add((x, y)) @staticmethod def calc_position(x, y, ratio): force = 1 / (((x-CENTER_X) ** 2 + (y-CENTER_X) ** 2) ** 0.5) dx = ratio * force*(x - CENTER_X) + random.randint(-1, 1) dy = ratio * force*(y - CENTER_Y) + random.randint(-1, 1) return x - dx, y - dy def calc(self, generate_frame): ratio = 10 * curve(generate_frame / 10 * pi) halo_radius = int(4 + 6 * (1 - curve(generate_frame / 10 * pi))) halo_number = int(3000 + 4000 * abs(curve(generate_frame / 10 * pi)**2)) all_points = [] # 光环 heart_halo_point = set() for _ in range(halo_number): t = random.uniform(0,2 * pi) x,y = heart_function(t,shrink_ratio=11.6) x,y = shrink(x,y,halo_radius) if (x,y) not in heart_halo_point: heart_halo_point.add((x,y)) x += random.randint(-14,14) y += random.randint(-14,14) size = random.choice((1,2,2)) all_points.append((x,y,size)) # 轮廓 for x,y in self._points: x,y = self.calc_position(x,y,ratio) size = random.randint(1,3) all_points.append((x,y,size)) # 内容 for x,y in self._edge_diffusion_points: x,y = self.calc_position(x,y,ratio) size = random.randint(1,2) all_points.append((x,y,size)) for x,y in self._center_diffusion_points: x,y = self.calc_position(x,y,ratio) size = random.randint(1,2) all_points.append((x,y,size)) self.all_points[generate_frame] = all_points def render(self,render_canvas,render_frame): for x,y,size in self.all_points[render_frame % self.generate_frame]: render_canvas.create_rectangle(x,y,x+size,y+size,width = 0 , fill = HEART_COLOR)def draw(main:Tk,render_canvas:Canvas,render_heart:Heart,render_frame = 0): render_canvas.delete(&quot;all&quot;) render_heart.render(render_canvas,render_frame) main.after(160,draw,main,render_canvas,render_heart,render_frame+1)if __name__ == &quot;__main__&quot;: root = Tk() root.title(&quot;I LOVE YOU&quot;) canvas = Canvas(root,bg =&#x27;black&#x27;,height = HEIGHT,width = WIDTH) canvas.pack() heart = Heart() draw(root,canvas,heart) root.mainloop()","categories":[{"name":"技术","slug":"技术","permalink":"http://example.com/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"技术大会","slug":"技术大会","permalink":"http://example.com/tags/%E6%8A%80%E6%9C%AF%E5%A4%A7%E4%BC%9A/"}],"author":"Lin"},{"title":"技术分享（一）","slug":"技术分享（一）","date":"2022-12-25T15:13:18.000Z","updated":"2023-12-06T16:49:33.663Z","comments":true,"path":"2022/12/25/技术分享（一）/","link":"","permalink":"http://example.com/2022/12/25/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB%EF%BC%88%E4%B8%80%EF%BC%89/","excerpt":"","text":"自动化抢购脚本所需模块1.datetime 2.time 3.selenium 4.win32.client 思路（以淘宝为例)1.生成浏览器助手 2.利用机器人自动打开淘宝界面 3.自动定位找到登录按钮并点击进入登录界面 4.自动get进入购物车界面 5.自动找到全选按钮并点击勾选 6.对比时间，使用datetime获取当前时间，将当前时间与秒杀时间对比 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657import datetimeimport timeimport seleniumfrom selenium import webdriverimport win32com.clientspeaker = win32com.client.Dispatch(&quot;SAPI.SpVoice&quot;)from selenium.webdriver.common.by import By# 秒杀时间times = &#x27;2022-12-25 21:01:00&#x27;bro = webdriver.Chrome()bro.get(&quot;https://www.taobao.com/&quot;)time.sleep(3)bro.find_element(By.CLASS_NAME,&quot;h&quot;).click()print(f&quot;请扫码&quot;)time.sleep(15)bro.get(&quot;https://cart.taobao.com/cart.htm&quot;)time.sleep(5)while 1==1: if bro.find_element(By.CLASS_NAME,&quot;cart-checkbox&quot;): bro.find_element(By.CLASS_NAME, &quot;cart-checkbox&quot;).click() breakwhile 1==1: now = datetime.datetime.now().strftime(&#x27;%Y-%m-%d %H:%M:%S.%f&#x27;) print(now) if now &gt; times: while 1==1: try: if bro.find_element(By.ID,&quot;J_Go&quot;): print(&quot;here&quot;) bro.find_element(By.ID, &quot;J_Go&quot;).click() print(f&quot;主人，已抢到，请及时支付&quot;) speaker.Speak(f&quot;主人，已经抢到，请及时支付&quot;) break except: pass while 1==1: try: if bro.find_element(By.CLASS_NAME,&quot;go-btn&quot;): print(&quot;here&quot;) bro.find_element(By.CLASS_NAME, &quot;go-btn&quot;).click() print(f&quot;主人，已提交订单&quot;) speaker.Speak(f&quot;主人，已提交订单&quot;) break except: pass 优化注意可以采用生成BP连接的形式直接跳过结算界面。","categories":[{"name":"技术","slug":"技术","permalink":"http://example.com/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"技术大会","slug":"技术大会","permalink":"http://example.com/tags/%E6%8A%80%E6%9C%AF%E5%A4%A7%E4%BC%9A/"}],"author":"林宇轩"},{"title":"my mood","slug":"my-mood","date":"2022-12-24T13:53:14.000Z","updated":"2022-12-24T13:55:33.535Z","comments":true,"path":"2022/12/24/my-mood/","link":"","permalink":"http://example.com/2022/12/24/my-mood/","excerpt":"","text":"","categories":[{"name":"人生情","slug":"人生情","permalink":"http://example.com/categories/%E4%BA%BA%E7%94%9F%E6%83%85/"}],"tags":[{"name":"心情感想","slug":"心情感想","permalink":"http://example.com/tags/%E5%BF%83%E6%83%85%E6%84%9F%E6%83%B3/"}]},{"title":"categories","slug":"categories","date":"2022-12-24T04:49:58.000Z","updated":"2022-12-24T04:49:58.197Z","comments":true,"path":"2022/12/24/categories/","link":"","permalink":"http://example.com/2022/12/24/categories/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"我的博客","slug":"我的博客","date":"2022-12-23T12:35:04.000Z","updated":"2022-12-24T13:55:16.831Z","comments":true,"path":"2022/12/23/我的博客/","link":"","permalink":"http://example.com/2022/12/23/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"第一章我今天配的好痛苦 第二章我正在想办法","categories":[{"name":"人生事","slug":"人生事","permalink":"http://example.com/categories/%E4%BA%BA%E7%94%9F%E4%BA%8B/"}],"tags":[{"name":"日程记叙","slug":"日程记叙","permalink":"http://example.com/tags/%E6%97%A5%E7%A8%8B%E8%AE%B0%E5%8F%99/"}]},{"title":"Hello World","slug":"hello-world","date":"2022-12-23T12:05:19.012Z","updated":"2022-12-23T12:05:19.013Z","comments":true,"path":"2022/12/23/hello-world/","link":"","permalink":"http://example.com/2022/12/23/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"技术","slug":"技术","permalink":"http://example.com/categories/%E6%8A%80%E6%9C%AF/"},{"name":"python数据分析","slug":"python数据分析","permalink":"http://example.com/categories/python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"},{"name":"人生情","slug":"人生情","permalink":"http://example.com/categories/%E4%BA%BA%E7%94%9F%E6%83%85/"},{"name":"人生事","slug":"人生事","permalink":"http://example.com/categories/%E4%BA%BA%E7%94%9F%E4%BA%8B/"}],"tags":[{"name":"技术大会","slug":"技术大会","permalink":"http://example.com/tags/%E6%8A%80%E6%9C%AF%E5%A4%A7%E4%BC%9A/"},{"name":"心情感想","slug":"心情感想","permalink":"http://example.com/tags/%E5%BF%83%E6%83%85%E6%84%9F%E6%83%B3/"},{"name":"日程记叙","slug":"日程记叙","permalink":"http://example.com/tags/%E6%97%A5%E7%A8%8B%E8%AE%B0%E5%8F%99/"}]}