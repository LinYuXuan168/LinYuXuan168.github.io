{"meta":{"title":"Alrik Blog","subtitle":"","description":"this is Alrik blog","author":"Alrik","url":"http://example.com","root":"/"},"pages":[{"title":"","date":"2023-12-06T19:13:15.405Z","updated":"2023-12-06T19:13:15.405Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"本网站用于个人博客记录，主要是学习技术方面"},{"title":"所有分类","date":"2023-12-06T17:14:41.250Z","updated":"2023-12-06T17:14:41.250Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2023-12-06T17:14:25.145Z","updated":"2023-12-06T17:14:25.145Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""},{"title":"Welcome","date":"2023-12-06T17:39:57.837Z","updated":"2023-12-06T17:39:57.837Z","comments":true,"path":"friends/index.html","permalink":"http://example.com/friends/index.html","excerpt":"大家好，我是Alrik，欢迎大家为提出建议，指点一二","text":"大家好，我是Alrik，欢迎大家为提出建议，指点一二 这里可以写友链页面下方的文字备注，例如自己的友链规范、示例等。"}],"posts":[{"title":"cddfuse","slug":"蓝桥杯刷题/蓝桥杯","date":"2024-01-30T16:00:00.000Z","updated":"2024-02-02T01:43:15.820Z","comments":true,"path":"2024/01/31/蓝桥杯刷题/蓝桥杯/","link":"","permalink":"http://example.com/2024/01/31/%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%88%B7%E9%A2%98/%E8%93%9D%E6%A1%A5%E6%9D%AF/","excerpt":"","text":"A 题请求出在 12345678 至 98765432 中，有多少个数中完全不包含 2023 。 完全不包含 2023 是指无论将这个数的哪些数位移除都不能得到 2023 。 例如 20322175，33220022 都完全不包含 2023，而 20230415，20193213 则 含有 2023 (后者取第 1, 2, 6, 8 个数位) 。 function 1：直接在原数上进行操作，使用双指针那个的方法1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253import time start = time.time() counts = 0 for i in range(12345678,98765433): s = str(i) slow = 0 fast = 0 r = &#x27;&#x27; while slow &lt; len(s): if r ==&#x27;2023&#x27;: # counts += 1 break if s[slow] == &#x27;2&#x27;: r += s[slow] fast = slow while fast &lt; len(s): if r == &#x27;2023&#x27;: # print(&quot;ok&quot;) break if s[fast] == &#x27;0&#x27;: slow = fast r += s[slow] while fast &lt; len(s): if r == &#x27;2023&#x27;: # print(&quot;ok&quot;) break if s[fast] == &#x27;2&#x27;: slow = fast r += s[slow] while fast &lt; len(s): if r == &#x27;2023&#x27;: # print(&quot;ok&quot;) break if s[fast] == &#x27;3&#x27;: slow = fast r += s[slow] else: fast += 1 else: fast += 1 else: fast += 1 slow += 1 else: slow += 1 if r == &#x27;2023&#x27;: counts += 1 print(counts) end = time.time() print(end - start) function 2: 建立标识符，通过一个指针解决12345678910111213141516171819ans = 0 def find(x): tmp = &quot;2023&quot; a = str(x) j = 0 for i in a: # 对数字进行遍历 if i == tmp[j]: # 从左到右逐个遍历是否依次会出现2023四个数字 j += 1 if j == 4: # 说明完全包含2023 return True return False for i in range(12345678,98765433): if not find(i): # 这里要的是完全不包含2023，反向答案 ans += 1 # 要取反加notprint(ans) B 题function 首先要注意两个点， 第一个是合出来的旧硬币的值最大并不是 2023，可以大于 2023 第二个是注意是两个硬币换取一个 情况一 先假设 2023 是最大的，那么就合成的这个值就是 1 + 2022，2+2021，3+ 2020，个数取决于小面值的硬币的个数，最后一项是 1011 + 1012，所以是从 1+2+3…+1011，然后加上原来的 2023 情况二 如果合出来的大于 2023，那就要考虑从哪里开始进行相加，最后一个加的是哪一个。最后合成的值为：res &#x3D; start + 2023，所以最后一个相加的值就是 end &#x3D; (res - 1) &#x2F; 2 得到的个数就是 sumK 为一个 start 和 end 构成的数列 1234567891011max_sumk = 0 for start in range(1,2023): sumk = 0 res = start + 2023 end = (res - 1) / 2 sumk = (start + end ) * (end - start + 1) // 2 if sumk &gt; max_sumk: max_sumk = sumk print(start) print(res) print(max_sumk)","categories":[{"name":"算法学习","slug":"算法学习","permalink":"http://example.com/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"蓝桥杯","slug":"蓝桥杯","permalink":"http://example.com/tags/%E8%93%9D%E6%A1%A5%E6%9D%AF/"}],"author":"林宇轩"},{"title":"Git入门学习","slug":"编程学习/Git博客","date":"2023-12-15T16:00:00.000Z","updated":"2023-12-16T02:50:19.454Z","comments":true,"path":"2023/12/16/编程学习/Git博客/","link":"","permalink":"http://example.com/2023/12/16/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/Git%E5%8D%9A%E5%AE%A2/","excerpt":"本篇文章主要简述 Git 的基本介绍和常用的命令，以及在实际的应用","text":"本篇文章主要简述 Git 的基本介绍和常用的命令，以及在实际的应用 Git 介绍 Git 是一个免费的开源的分布式版本控制系统，用于进行项目的管理 Git 的文件状态 Git 的文件状态分为三种：已提交，已修改，已暂存，文件流转在本地工作目录，暂存区，本地仓库，**远程仓库。 Git 文件时，先要把文件add到暂存区，然后commit到本地的仓库，再从本地仓库push到远程的仓库。 Git 的日常使用命令 Git 的日常管理是比较简单的，记住一下几个命令即可 1234567891011# 默认仓库已经是初始化好，创建好的--- git clone # 远程克隆远端的仓库git pull # 拉取远端仓库的内容，同步本地和仓库--- # 在本地的仓库进行修改之后git status # 查看当前修改文件的状态git add . # 将修改的文件添加到暂存区git commit -m &quot;add your instruction&quot; # 将暂存区的文件添加到本地仓库--- git push # 将本地仓库的文件提交到远程仓库 Git 其他常用命令 以下是一些常用的 Git 的命令，只有在特定的时候或场景需要被用到 12345678910111213141516171819202122232425262728293031# 初始化Git代码库git init # 配置Gitgit config [--global] user.name &quot;name&quot;git config [--global] user.email &quot;email address&quot;# 添加文件git add &quot;指定文件&quot;# 提交git commit -amend -m [message] # 使用新的commit代替上一次的提交，（常用来改写上一次commit的message# 查询git branch # 列出本地分支git branch -r # 列出远程分支git log # 查看当前分支的版本历史git log --stat # 查看commit历史git diff # 显示暂存区和工作区的差异# 拉回git pull [remote][branch] # 取回远程仓库的变化，与本地分支合并# 强制拉回，远端覆盖本地git fetch --allgit reset --hard origin/&#123;branch_name&#125;# 强制推送git push -f origin branch_name# 回滚git checkout [file] # 恢复暂存区的指定文件到工作区git checkout [commit][file] # 恢复某个commit的文件git reset --hard [commit id] # 回滚到某一次提交的版本git reser --hard HEAD^ # 回退到上一个版本# 使用revert是撤销一次提交，所以后面的commit id是你需要回滚到的版本的前一次提交,一般用来回退公共远程分支git revert HEAD # 撤销最近一次提交 git revert HEAD~1 # 撤销上上次的提交，注意：数字从0开始git revert 0ffaacc # 撤销0ffaacc这次提交","categories":[{"name":"技术学习","slug":"技术学习","permalink":"http://example.com/categories/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"Git学习","slug":"Git学习","permalink":"http://example.com/tags/Git%E5%AD%A6%E4%B9%A0/"}],"author":"林宇轩"},{"title":"爬虫学习(1)","slug":"python/python爬虫/爬虫学习","date":"2023-12-09T16:00:00.000Z","updated":"2023-12-10T01:25:24.235Z","comments":true,"path":"2023/12/10/python/python爬虫/爬虫学习/","link":"","permalink":"http://example.com/2023/12/10/python/python%E7%88%AC%E8%99%AB/%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0/","excerpt":"","text":"基础理论 robots.txt 协议（爬前必看） http 协议 请求头信息：Request Headers : - Uesr-Agent : 请求载体的身份标识 －Connection: 请求完毕后是断开连接还是保持连接 响应头信息：－Content-Type: 服务器响应回客户端的数据类型 https 协议：安全的 http 协议 （安全的超文本协议）涉及数据加密 数据加密： 对称密钥加密 非对称密钥加密 证书密钥加密 Request 模拟浏览器发送请求 使用 指定 url 发起请求 获取响应数据 持久化存储 （响应数据） request123456789101112131415# pip install requestimport requestsif __name__ == &quot;__main__&quot;: # 指定url url1 = &quot;... &quot; # 发送请求 # Get方法返回一个响应对象 respones = requests,get(url = &quot;url1&quot;) # 获取响应数据 # .text 返回字符串形式的响应数据 page_text = responses.text # 持久化存储 with open(&quot;[name]&quot;,&quot;w&quot;,encoding = &#x27;utf-8&#x27;) as fp: fp.write(page_text) 123456789101112131415# url (删去根节）处理url携带的参数：1. 将参数封装到字典当中 2url1 = &#x27;&#x27;kw = input()param = ｛&quot;query&quot; : kw｝# UA伪装header = ｛‘User-Agent’:&quot;...&quot;｝# 发起请求 url是携带参数的，参数放在params当中，在请求过程中处理了参数responses = requests.get(url=url1,params=param,headers = header)# 获取响应数据page_text = response.text# 长久化存储filename = kw+&#x27;.html&#x27;with open(fileName,&#x27;w&#x27;,encoding = &#x27;utf-8&#x27;) as fp: fp.write(page_text) 反爬机制 UA UA：User-Agent(请求载体的身份标识） 门户网站的服务器会检测对应请求的载体身份标识 反反爬策略 UA 伪装 让爬虫对应的请求载体身份标识伪装造成某一个浏览器 将对应的 User-Agent 封装到字典当中 先采用浏览器自带的检查－&gt; Network - &gt;获取请求的 url 和参数 post 请求 （携带参数） import requests # 指定url,处理变量 url_post = &quot;...&quot; # 可以根据上文修改成动态的嗯嗯 datas = &#123;&#39;kw&#39;:&#39;dog&#39;&#125; # 进行UA伪装 headers = &#123;&#39;User-Agent&#39;:&#39;&#39;&#125; # 发起post请求,参数存放在data当中 responses = requeses.post(url = url_post,data=datas,headers = headers) # 获取数据：json（）方法直接返回一个对象(确认响应的数据为json类型才能用json（）) page_json = responses.json # 长久存储 fp1 = open(&#39;./dog.json&#39;,&#39;w&#39;,encoding=&#39;utf-8&#39;) json.dump(page_json,fp = fp1,ensure_ascii = False)","categories":[{"name":"python","slug":"python","permalink":"http://example.com/categories/python/"},{"name":"python爬虫","slug":"python/python爬虫","permalink":"http://example.com/categories/python/python%E7%88%AC%E8%99%AB/"}],"tags":[{"name":"爬虫学习","slug":"爬虫学习","permalink":"http://example.com/tags/%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0/"}],"author":"林宇轩"},{"title":"cddfuse","slug":"计算机视觉/cddfuse","date":"2023-12-07T16:00:00.000Z","updated":"2023-12-08T16:05:53.109Z","comments":true,"path":"2023/12/08/计算机视觉/cddfuse/","link":"","permalink":"http://example.com/2023/12/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/cddfuse/","excerpt":"","text":"基本信息名称： CDDFuse: Correlation-Driven Dual-Branch Feature Decomposition for Multi-Modality Image Fusion (CDDFuse：用于多模态图像融合的相关驱动双分支特征分解)作者：Zixiang Zhao (赵子祥)关键词：cddfuse,Multi-modality (MM) image fusion,restormer,transformer-CNN 摘要提取多模态（MM）图像融合旨在渲染融合图像，保持不同模态的优点，例如功能突出和详细纹理。为了应对跨模态特征建模和分解所需的模态特定和模态共享特征的挑战，我们提出了一种新颖的相关驱动特征分解融合（CDDFuse）网络。首先，CDDFuse 使用 Restormer 块来提取跨模态浅层特征。然后，我们引入了双分支 Transformer-CNN 特征提取器，其中 Lite Transformer (LT) 块利用远程注意力来处理低频全局特征，而可逆神经网络 (INN) 块则专注于提取高频局部信息。进一步提出了相关驱动损失，基于嵌入信息使低频特征相关，而高频特征不相关。然后，基于 LT 的全局融合层和基于 INN 的局部融合层输出融合图像。大量的实验表明，我们的 CDDFuse 在多种融合任务中取得了有希望的结果，包括红外 - 可见光图像融合和医学图像融合。我们还表明，CDDFuse 可以在统一的基准测试中提高下游红外 - 可见光语义分割和对象检测的性能。 创新点 提出了相关驱动特征分解融合（CDDFuse）模型，其中通过双分支编码器实现模态特定和模态共享特征提取，并由解码器重建融合图像 研究方法 引入了双分支 Transformer-CNN 特征提取器，其中 Lite Transformer (LT) 块利用远程注意力来处理低频全局特征，而可逆神经网络 (INN) 块则专注于提取高频局部信息 进一步提出了相关驱动损失，基于嵌入信息使低频特征相关，而高频特征不相关。 研究过程incroduction 将现有的 MMIF 方法与 cddfuse 在八个指标上进行比较，在 MSRS 和 RoadScene 两个数据集上面 cddfuse 具有更先进的性能 普通融合架构和 cdduse 融合架构的流程展示 现有存在的三大问题： CNN 的内部工作机制难以控制和解释，导致跨模态特征提取不足。 上下文无关的 CNN 仅在相对较小的感受野中提取局部信息，很难提取全局信息来生成高质量的融合图像 融合网络的前向传播常常导致高频信息的丢失 新模型的解决方法： 对提取的特征添加相关性限制并限制解空间。 融合 CNN 中局部上下文提取和计算效率的优势以及 Transformer 中全局注意力和远程依赖建模的优势来完成 MMIF 任务。 采用可逆神经网络 (INN) 的构建模块 Related Work generative adversarial network (GAN)-based models 基于生成对抗网络（GAN）的模型。 AE-based models 基于 AE 的模型。 unified models 统一模型 algorithm unrolling models 算法展开模型。 MethodEncoder 编码器由三部分组成，基于 Restormer 块的共享特征编码器（SFE）、基于 Lite Transformer（LT）块的基本 transformer 编码器（BTE）和基于可逆神经网络（INN）块的细节 CNN 编码器 (DCE) Restormer 块可以通过在特征维度上应用自注意力来从高分辨率输入图像中提取全局特征，优点是可以不用增加太多额外的 使用 LT 块作为 BTE 的基本单元。通过扁平化前馈网络的结构，扁平化了 Transformer 块的瓶颈，LT 块缩小了嵌入，以减少参数数量，同时保持相同的性能计算量 INN 模块通过使其输入和输出特征相互生成，使得输入信息能够得到更好的保存，采用具有仿射耦合层的 INN 块 Fusion layer 采用 LT 模块和 INN 模块构成基本和细节融合层 Decoder 采用 Restomer 块 在第一训练阶段，重构图像作为第二阶段的输入，在第二训练阶段，输出融合图像 Train 采用两次训练，在第一训练阶段，提取特征后连接进行重构图像，在第二训练阶段，将重构图像输入后进行提取特征后融合输出图像","categories":[{"name":"计算机视觉","slug":"计算机视觉","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"}],"tags":[{"name":"cddfuse图像融合","slug":"cddfuse图像融合","permalink":"http://example.com/tags/cddfuse%E5%9B%BE%E5%83%8F%E8%9E%8D%E5%90%88/"}],"author":"林宇轩"},{"title":"hexo部署到服务器Readme","slug":"技术学习/hexo部署到服务器Readme","date":"2023-12-01T02:33:02.000Z","updated":"2023-12-06T19:58:42.501Z","comments":true,"path":"2023/12/01/技术学习/hexo部署到服务器Readme/","link":"","permalink":"http://example.com/2023/12/01/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/hexo%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8Readme/","excerpt":"","text":"前言 所用的服务器为腾讯云的轻量应用服务器 域名也是在腾讯云上购买的 我自身的话是现在本地上已经搭建好hexo博客了，并且是可以使用的，一开始是在本地上进行使用的，后续把博客部署到服务器上 具体使用的是nginx和git进行搭配部署 hexo配置 在服务器上新建好一个部署目录即可 服务器配置配置宝塔界面拿到服务器后先把宝塔面板配置好，这里可以参照腾讯云文档给出的配置教程进行配置:https://cloud.tencent.com/document/product/1207/54078 安装并且配置nginxnginx ： http和反向代理web服务器 这里的安装是直接采用宝塔面板进行安装，方便快捷，然后在面板上进行管理对nginx进行配置 如果没有安装宝塔的话nginx的安装会比较复杂，使用命令行进行安装，然后通过nginx.conf进行配置 nginx配置![[Pasted image 20231120141037.png]] 修改listen，如果不是80，要改成80的，不然后面会报错，同时端口80的要记得开放 server_name 改成自己的域名 root 为部署到服务器上的hexo目录 配置完后记得重载(也可以命令行重载 .&#x2F;nginx -s reload ) 安装Git服务并且配置安装Git12yum install -y gitgit --version # 显示版本说明安装成功 配置git 为服务器添加git用户用于博客自动部署到服务器上面12useradd git # 添加名为git的用户passwd git # 修改git用户的密码 授予git用户sudo权限，在&#x2F;etc&#x2F;sudoers 文件下添加：git ALL &#x3D; (ALL) ALL 添加密钥 添加ssh密码，避免每一次同步都需要进行验证12345678910# 本地生成密钥对ssh-keygen# 本地的.ssh文件下的id_rsa.pub复制vim id_rsa.pub# 在服务器上找到.ssh文件（没有则建立）后新建authorized——keys文件，将密钥复制进去# 设置权限chmod 600 ... authorized_keyschmod 700 ... .ssh# 将git密钥文件的拥有者改成git用户的chown -R git:git （.ssh的路径) 配置git仓库12345678910# 创建git仓库的位置mkdir -p /repo # 初始化git仓库git init --bare blog.git# 把git仓库的拥有者改成git用户chown -R git:git &#123;仓库路径&#125;# 配置部署目录 路径 bloh.git -&gt; hooks -&gt; post-receive（找不到则新建一个）在文件输入下列内容git --work-tree=&#123;hexo部署目录&#125; --git-dir= &#123;git仓库目录&#125;# 增加可执行权限chown -R git:git &#123;post-receive的路径&#125; hexo部署配置_ config.yml文件配置 在hexo的_config.yml文件中，把repo改成git@服务器ip：git仓库目录1234# 部署hexo cleanhexo generate hexo deplot 添加域名解析 在服务器那里添加域名解析即可，记录值为服务器的公网ip 可能遇到的问题在git的时候缺乏权限 检查部署目录和仓库目录的每一个文件是否都是属于git用户 配置完成后使用ip打不开，显示找不到站点 检查nginx的配置是否正确，修改后进行重载nginx","categories":[{"name":"技术学习","slug":"技术学习","permalink":"http://example.com/categories/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"}],"author":"林宇轩"},{"title":"re","slug":"编程学习/re","date":"2023-04-20T14:26:25.000Z","updated":"2023-12-06T19:39:01.728Z","comments":true,"path":"2023/04/20/编程学习/re/","link":"","permalink":"http://example.com/2023/04/20/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/re/","excerpt":"","text":"七个境界1234567891011121314151617181920212223242526import re # level1:固定字符串text = &#x27;麦叔身高:178，体重：168，学号：123456，密码:9527&#x27;# findall()方法的第1个参数是模式，第2个参数是要查找的字符串。# re的findall()方法找到所有符合模式的字符串，返回一个列表。# r表示这是一个raw字符串，让Python不要去转义里面的特殊字符print(re.findall(r&#x27;123456&#x27;, text)) # level2 - 某一类字符# \\d表示所有的数字，1,7,8,1,6,8等都可以匹配到print(re.findall(r&#x27;\\d&#x27;, text))# level3 重复某一类字符# 增加了+号，表示数字可以出现1到多次，所以178等都符合它的要求。print(re.findall(r&#x27;\\d+&#x27;, text))# 组合level4，5 -&gt; 找出座机号# \\d&#123;4&#125;-\\d&#123;8&#125;这是一个组合的模式，表示前面4个数字，中间一个横杠，后面8个数字。text = &#x27;麦叔电话是18812345678，他还有一个电话号码是18887654321，他爱好的数字是01234567891，他的座机是：0571-52152166&#x27;print(re.findall(r&#x27;\\d&#123;4&#125;-\\d&#123;8&#125;|1\\d&#123;10&#125;&#x27;, text))# 组合level6限定位置，7内部约束# ^符号，表示一定要在句子的开头才行# \\w&#123;3&#125;表示3个字符，放在小括号中(\\w&#123;3&#125;)就成为一个分组，而后面的(\\1)表示它里面的内容和第1个括号里的内容必须相同，其中的1就表示第1个括号，也就是说3个字符要重复出现两次。print(re.findall(r&#x27;^1\\d&#123;10&#125;|^\\d&#123;4&#125;-\\d&#123;8&#125;&#x27;, text))print(re.findall(r&#x27;(\\w&#123;3&#125;)(\\1)&#x27;, text)) 书写步骤 确定模式包含几个子模式 各个部分的字符分类是什么 各个子模式如何重复 是否有外部位置限制 是否有内部制约关系 正则表达式Cheatsheet re模块方法 re.search()：查找符合模式的字符，只返回第一个，返回Match对象 re.match()：和search一样，但要求必须从字符串开头匹配 re.findall()：返回所有匹配的字符串列表 re.finditer()：返回一个迭代器，其中包含所有的匹配，也就是Match对象 re.sub()：替换匹配的字符串，返回替换完成的文本 re.subn()：替换匹配的字符串，返回替换完成的文本和替换的次数 re.split()：用匹配表达式的字符串做分隔符分割原字符串 re.compile()：把正则表达式编译成一个对象，方便后面使用","categories":[{"name":"编程学习","slug":"编程学习","permalink":"http://example.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"正则表达式","slug":"正则表达式","permalink":"http://example.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"}],"author":"林宇轩"},{"title":"numpy","slug":"python/pyhton数据分析/numpy","date":"2023-02-09T02:33:02.000Z","updated":"2023-12-06T19:41:38.768Z","comments":true,"path":"2023/02/09/python/pyhton数据分析/numpy/","link":"","permalink":"http://example.com/2023/02/09/python/pyhton%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/numpy/","excerpt":"","text":"通过数组进行运算的 Array创建 数组数据类型必须统一，且必须是有序的集合 Codenp.array （**元素类型不一致会强转） ** np.routines函数 12345678910111213141516171819202122232425262728# 用1来填充生成高维数组，shape决定行数列数，dtype则指数据类型np.ones(shape,dtype = None, order = &#x27;C&#x27;)np.ones(shape(3,2),dtype = np.int) # 三行两列np.ones(shape(3,5,2),dtype = np.int) # 三行五列的二维数组# np.zeros 用0填充# np.full(shape,fill_value = 6,dtype = None,order = &quot;C&quot;) # 用6来填充 # 对角线为一其他为0np.eye(N,M = none ,k = 0,dtype = float)np.eye(3,M = none ,k = 0,dtype = float) # 三维矩阵np.eye(3,M = 2 ,k = 1,dtype = float) # 三行两列 向右偏一个 # 生成等差数列# 按个数取，endpoint表示是否取末端np.linspace(start,stop,num = 10 ,endpoint = True,restep = False,dtype = None) np.linspace(0.10.num = 11 endpoint = True) # 按步长取 ,不取末端np.arrange(start，stop,step ,dtype = None)# 生成随机数np.random.randint(low,high,size,dtype) # size即前面的shape# 正态分布函数np.random.randn(d0,d1,...dn) # 标准正态分布 参数表示维数np.random.normal(loc,scale,size) # 普通正态分布 loc 期望值，scale方差，size个数# 生成0到1的随机数np.random.random(size) Array属性 ndim:维度 shape：形状（各维度的形状长度） size : 长度大小，即元素个数 dtype : 数据类型 Array的基本操作访问 直接访问 Codenp[roe_dinex,col_index] 间接访问 Codenp[roe_dinex][col_index]… 行访问 Codenp[roe_dinex,:] 列访问 Codenp[:,col_index] 多个元素访问（索引切片都是左闭右开区间)1.元素连续Codenp[1:3,2:5] （1:3为第一维，2:5为第二维）2.元素不连续 **使用列表作为索引值 3.使用bool列表访问,True对应的值会被返回 【BOOL的长度必须列长匹配** 】 1234567array([[1, 2, 3, 9, 3], [2, 8, 4, 6, 8], [5, 6, 1, 8, 8], [7, 3, 3, 1, 5], [9, 3, 6, 1, 5]])np[1:3,1:3] # 第一维取1和2 第二维取1和2np[[1,2],1] # 第一维取1和2，第二维取1 切片左闭右开 123# 采用：：两个冒号来指定步长np[::2] # 步长为二np[::-1] # 倒序输出 变形参数是一个元组，且变前变后元素数量不能变 123n1 = np.random.randint(1,10,size = (5,5))n1.reshape((-1,1)) # 变成一列n1.reshape((1,-1)) # 变成一行 级联两个级联的方向上数据数量要一致 123np.concatenate(array_like,axis) # array_like列表类型 axis 默认为0 竖着级联 axis = 1 横着连np.hstack() # 横向np.vstack() # 竖向 切分1234np.split(array,indices_or_sections,axis) # indices_or_sections表示切成的份数np.split(array,indices_or_sections = [1,4] ,axis) # 0:1,1:4,4: b不可以整除用切片规范 np.hsplit() # 横向np.vsplit() # 竖向 副本 深复制 - 内存空间 Codecopy() 浅复制 - **地址 ** Array聚合运算默认把整个数组的数据进行运算axis参数控制行列，行为1 列为 0 12345# 求和n1.sum# 空值np.nan Array矩阵运算numpy默认的运算符方式，数组中对应位置的数据相互运算 12# 矩阵积np.dot 广播机制（数据结构不同时）拓展补充数据，拓展维度 排序全排序Code np.sortCode arry.sort 部分排序 Codenp.partition(a,k)** k为正取最大k个，k为负取最小k个**","categories":[{"name":"python","slug":"python","permalink":"http://example.com/categories/python/"},{"name":"python数据分析","slug":"python/python数据分析","permalink":"http://example.com/categories/python/python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"}],"tags":[{"name":"数据分析","slug":"数据分析","permalink":"http://example.com/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"}],"author":"林宇轩"},{"title":"jupyter notebook","slug":"python/pyhton数据分析/jupyter-notebook","date":"2023-02-09T02:25:07.000Z","updated":"2023-12-06T19:38:38.304Z","comments":true,"path":"2023/02/09/python/pyhton数据分析/jupyter-notebook/","link":"","permalink":"http://example.com/2023/02/09/python/pyhton%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/jupyter-notebook/","excerpt":"","text":"单元格有两种状态 编辑状态 - 写代码或者文本（ENTER or 鼠标点击单元格内部） 选中状态 - 单元格进行编辑（ESC or 鼠标点击左边空白处） 单元格操作要先处于选中状态 新增单元格:B 在当前选中的单元格下方新增A 在当前选中的单元格上方新增 删除单元格：DD 删除选中单元格 复制，粘贴，剪切单元格：C 复制V 粘贴X 剪切 撤销：Z 单元格两种模式 Code - 选中状态下 Y Markdown - 选中状态下M Mardown一般用来整理思路写分析思路 运行所有的单元格运行都是独立的Cltrl + Enter Markdown进入预览模式 Code进入运行模式 命令 快速查看所有变量与函数名称Code%who 返回变量列表Code%who_ls 运行外部文件（默认为当前目录）Code %run *.py 运行计时Code %time statement(代码名称) **必须写在同一行 **Code %timeit statement(代码名称) (去多次时间平均)Code%%timeit (测试多组) 输入输出历史 In 输入 out 输出 “_”表示上一个输出 “_2 表示Out[2]","categories":[{"name":"python","slug":"python","permalink":"http://example.com/categories/python/"}],"tags":[{"name":"jupyter notebook","slug":"jupyter-notebook","permalink":"http://example.com/tags/jupyter-notebook/"}],"author":"林宇轩"},{"title":"技术分享（二）","slug":"python/python技术应用/技术分享（二）","date":"2022-12-25T15:28:10.000Z","updated":"2023-12-06T19:42:23.817Z","comments":true,"path":"2022/12/25/python/python技术应用/技术分享（二）/","link":"","permalink":"http://example.com/2022/12/25/python/python%E6%8A%80%E6%9C%AF%E5%BA%94%E7%94%A8/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB%EF%BC%88%E4%BA%8C%EF%BC%89/","excerpt":"","text":"代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249import randomfrom math import sin, cos, pi, logfrom tkinter import *WIDTH = 640HEIGHT = 480CENTER_X = WIDTH / 2CENTER_Y = HEIGHT / 2IMAGE_ENLARGE = 11HEART_COLOR = &quot;#2ebb96&quot; # 自己换颜色 def heart_function(t, shrink_ratio: float = IMAGE_ENLARGE): x = 16 * (sin(t) ** 3) y = -(13 * cos(t) - 5 * cos(2 * t) - 2 * cos(3 * t) - cos(4 * t)) # 放大 x *= shrink_ratio y *= shrink_ratio # 移到围布中央 x += CENTER_X y += CENTER_Y return int(x), int(y) def scatter_inside(x, y, beta=0.15): ratio_x = -beta * log(random.random()) ratio_y = -beta * log(random.random()) dx = ratio_x * (x -CENTER_X) dy = ratio_y * (y -CENTER_Y) return x - dx, y - dy def shrink(x, y, ratio): force = -1 / (((x - CENTER_X) ** 2 + (y - CENTER_Y) ** 2) ** 1.6) dx = ratio * force * (x - CENTER_X) dy = ratio * force * (y - CENTER_Y) return x - dx, y-dydef curve(p): return 2 * (2 * sin(4 * p)) / (2 * pi) class Heart: def __init__(self, generate_frame=20): # 原始爱心坐标 self._points = set() # 边缘扩散点效果的合集 self._edge_diffusion_points = set() # 中心扩散效果点的合集 self._center_diffusion_points = set() # 每帧动态点坐标 self.all_points = &#123;&#125; self.build(2000) self.random_halo = 1000 self.generate_frame = generate_frame for frame in range(generate_frame): self.calc(frame) def build(self, number): for _ in range(number): t = random.uniform(0, 2 * pi) x, y = heart_function(t) self._points.add((x, y)) # 爱心扩散 for _x, _y in list(self._points): for _ in range(3): x, y = scatter_inside(_x, _y, 0.05) self._edge_diffusion_points.add((x, y)) # 爱心再次扩散 point_list = list(self._points) for _ in range(4000): x, y = random.choice(point_list) x, y = scatter_inside(x, y, 0.17) self._center_diffusion_points.add((x, y)) @staticmethod def calc_position(x, y, ratio): force = 1 / (((x-CENTER_X) ** 2 + (y-CENTER_X) ** 2) ** 0.5) dx = ratio * force*(x - CENTER_X) + random.randint(-1, 1) dy = ratio * force*(y - CENTER_Y) + random.randint(-1, 1) return x - dx, y - dy def calc(self, generate_frame): ratio = 10 * curve(generate_frame / 10 * pi) halo_radius = int(4 + 6 * (1 - curve(generate_frame / 10 * pi))) halo_number = int(3000 + 4000 * abs(curve(generate_frame / 10 * pi)**2)) all_points = [] # 光环 heart_halo_point = set() for _ in range(halo_number): t = random.uniform(0,2 * pi) x,y = heart_function(t,shrink_ratio=11.6) x,y = shrink(x,y,halo_radius) if (x,y) not in heart_halo_point: heart_halo_point.add((x,y)) x += random.randint(-14,14) y += random.randint(-14,14) size = random.choice((1,2,2)) all_points.append((x,y,size)) # 轮廓 for x,y in self._points: x,y = self.calc_position(x,y,ratio) size = random.randint(1,3) all_points.append((x,y,size)) # 内容 for x,y in self._edge_diffusion_points: x,y = self.calc_position(x,y,ratio) size = random.randint(1,2) all_points.append((x,y,size)) for x,y in self._center_diffusion_points: x,y = self.calc_position(x,y,ratio) size = random.randint(1,2) all_points.append((x,y,size)) self.all_points[generate_frame] = all_points def render(self,render_canvas,render_frame): for x,y,size in self.all_points[render_frame % self.generate_frame]: render_canvas.create_rectangle(x,y,x+size,y+size,width = 0 , fill = HEART_COLOR)def draw(main:Tk,render_canvas:Canvas,render_heart:Heart,render_frame = 0): render_canvas.delete(&quot;all&quot;) render_heart.render(render_canvas,render_frame) main.after(160,draw,main,render_canvas,render_heart,render_frame+1)if __name__ == &quot;__main__&quot;: root = Tk() root.title(&quot;I LOVE YOU&quot;) canvas = Canvas(root,bg =&#x27;black&#x27;,height = HEIGHT,width = WIDTH) canvas.pack() heart = Heart() draw(root,canvas,heart) root.mainloop()","categories":[{"name":"python","slug":"python","permalink":"http://example.com/categories/python/"},{"name":"python技术应用","slug":"python/python技术应用","permalink":"http://example.com/categories/python/python%E6%8A%80%E6%9C%AF%E5%BA%94%E7%94%A8/"}],"tags":[{"name":"python应用","slug":"python应用","permalink":"http://example.com/tags/python%E5%BA%94%E7%94%A8/"}],"author":"Lin"},{"title":"技术分享（一）","slug":"python/python技术应用/技术分享（一）","date":"2022-12-25T15:13:18.000Z","updated":"2023-12-06T19:42:10.680Z","comments":true,"path":"2022/12/25/python/python技术应用/技术分享（一）/","link":"","permalink":"http://example.com/2022/12/25/python/python%E6%8A%80%E6%9C%AF%E5%BA%94%E7%94%A8/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB%EF%BC%88%E4%B8%80%EF%BC%89/","excerpt":"","text":"自动化抢购脚本所需模块1.datetime 2.time 3.selenium 4.win32.client 思路（以淘宝为例)1.生成浏览器助手 2.利用机器人自动打开淘宝界面 3.自动定位找到登录按钮并点击进入登录界面 4.自动get进入购物车界面 5.自动找到全选按钮并点击勾选 6.对比时间，使用datetime获取当前时间，将当前时间与秒杀时间对比 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657import datetimeimport timeimport seleniumfrom selenium import webdriverimport win32com.clientspeaker = win32com.client.Dispatch(&quot;SAPI.SpVoice&quot;)from selenium.webdriver.common.by import By# 秒杀时间times = &#x27;2022-12-25 21:01:00&#x27;bro = webdriver.Chrome()bro.get(&quot;https://www.taobao.com/&quot;)time.sleep(3)bro.find_element(By.CLASS_NAME,&quot;h&quot;).click()print(f&quot;请扫码&quot;)time.sleep(15)bro.get(&quot;https://cart.taobao.com/cart.htm&quot;)time.sleep(5)while 1==1: if bro.find_element(By.CLASS_NAME,&quot;cart-checkbox&quot;): bro.find_element(By.CLASS_NAME, &quot;cart-checkbox&quot;).click() breakwhile 1==1: now = datetime.datetime.now().strftime(&#x27;%Y-%m-%d %H:%M:%S.%f&#x27;) print(now) if now &gt; times: while 1==1: try: if bro.find_element(By.ID,&quot;J_Go&quot;): print(&quot;here&quot;) bro.find_element(By.ID, &quot;J_Go&quot;).click() print(f&quot;主人，已抢到，请及时支付&quot;) speaker.Speak(f&quot;主人，已经抢到，请及时支付&quot;) break except: pass while 1==1: try: if bro.find_element(By.CLASS_NAME,&quot;go-btn&quot;): print(&quot;here&quot;) bro.find_element(By.CLASS_NAME, &quot;go-btn&quot;).click() print(f&quot;主人，已提交订单&quot;) speaker.Speak(f&quot;主人，已提交订单&quot;) break except: pass 优化注意可以采用生成BP连接的形式直接跳过结算界面。","categories":[{"name":"python","slug":"python","permalink":"http://example.com/categories/python/"},{"name":"python技术应用","slug":"python/python技术应用","permalink":"http://example.com/categories/python/python%E6%8A%80%E6%9C%AF%E5%BA%94%E7%94%A8/"}],"tags":[{"name":"python应用","slug":"python应用","permalink":"http://example.com/tags/python%E5%BA%94%E7%94%A8/"}],"author":"林宇轩"}],"categories":[{"name":"算法学习","slug":"算法学习","permalink":"http://example.com/categories/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/"},{"name":"技术学习","slug":"技术学习","permalink":"http://example.com/categories/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/"},{"name":"python","slug":"python","permalink":"http://example.com/categories/python/"},{"name":"python爬虫","slug":"python/python爬虫","permalink":"http://example.com/categories/python/python%E7%88%AC%E8%99%AB/"},{"name":"计算机视觉","slug":"计算机视觉","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"},{"name":"编程学习","slug":"编程学习","permalink":"http://example.com/categories/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"},{"name":"python数据分析","slug":"python/python数据分析","permalink":"http://example.com/categories/python/python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"},{"name":"python技术应用","slug":"python/python技术应用","permalink":"http://example.com/categories/python/python%E6%8A%80%E6%9C%AF%E5%BA%94%E7%94%A8/"}],"tags":[{"name":"蓝桥杯","slug":"蓝桥杯","permalink":"http://example.com/tags/%E8%93%9D%E6%A1%A5%E6%9D%AF/"},{"name":"Git学习","slug":"Git学习","permalink":"http://example.com/tags/Git%E5%AD%A6%E4%B9%A0/"},{"name":"爬虫学习","slug":"爬虫学习","permalink":"http://example.com/tags/%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0/"},{"name":"cddfuse图像融合","slug":"cddfuse图像融合","permalink":"http://example.com/tags/cddfuse%E5%9B%BE%E5%83%8F%E8%9E%8D%E5%90%88/"},{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"},{"name":"正则表达式","slug":"正则表达式","permalink":"http://example.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"},{"name":"数据分析","slug":"数据分析","permalink":"http://example.com/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"},{"name":"jupyter notebook","slug":"jupyter-notebook","permalink":"http://example.com/tags/jupyter-notebook/"},{"name":"python应用","slug":"python应用","permalink":"http://example.com/tags/python%E5%BA%94%E7%94%A8/"}]}